package com.crimsonlogic.groceriessubbookingsystem.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crimsonlogic.groceriessubbookingsystem.entity.Groceries;
import com.crimsonlogic.groceriessubbookingsystem.entity.Subscription;
import com.crimsonlogic.groceriessubbookingsystem.entity.Users;
import com.crimsonlogic.groceriessubbookingsystem.service.GroceriesService;
import com.crimsonlogic.groceriessubbookingsystem.service.SubscriptionService;

@Controller
@RequestMapping("/subscription")
public class SubscriptionController {

    @Autowired
    private SubscriptionService subscriptionService;

    @Autowired
    private GroceriesService groceryService;

    // Displaying the subscription and grocery details
    @GetMapping("/sub")
    public String getSubscriptionDetails(@RequestParam("groceryId") String groceryId, Model model) {
        Groceries grocery = groceryService.getGroceryById(groceryId);
        model.addAttribute("grocery", grocery);
        return "subscription-details";
    }

    // Load the grocery details and subscription details
    @PostMapping("/submit")
    public String submitSubscription(@RequestParam("grocery_id") String groceryId,
                                     @RequestParam("quantity") int quantity,
                                     @RequestParam("user_id") String userId,
                                     @RequestParam("frequency") String frequencyStr,
                                     @RequestParam(value = "startDate", required = false) String startDateStr,
                                     @RequestParam(value = "weekDay", required = false) String weekDay,
                                     @RequestParam(value = "dayOfMonth", required = false) Integer dayOfMonth,
                                     HttpSession session,
                                     Model model) {

        try {
            // Validate stock availability
            if (!groceryService.updateStock(groceryId, -quantity)) {
                model.addAttribute("message", "Insufficient stock for the requested quantity.");
                return "subscription-details";
            }

            // Create a subscription
            Subscription subscription = subscriptionService.createSubscription(
                groceryId, userId, quantity, frequencyStr, startDateStr, weekDay, dayOfMonth
            );

            // Get the subscription cart from the session
            @SuppressWarnings("unchecked")
            List<Subscription> cart = (List<Subscription>) session.getAttribute("subCart");
            if (cart == null) {
                cart = new ArrayList<>();
            }

            // Add the subscription to the cart
            cart.add(subscription);
            session.setAttribute("subCart", cart);

            // Calculate the total amount of all items in the cart
            BigDecimal totalAmount = subscriptionService.calculateTotalAmount(cart);

            // Add cart and total amount to the model to display in the view
            model.addAttribute("subCart", cart);
            model.addAttribute("subTotalAmount", totalAmount);

            return "subCart";
        } catch (IOException e) {
            model.addAttribute("message", "Error creating subscription: " + e.getMessage());
            return "errorPage";
        }
    }

    // Display the subscription cart details
    @GetMapping("/subcart")
    public String viewCart(HttpSession session, Model model) {
        @SuppressWarnings("unchecked")
        List<Subscription> cart = (List<Subscription>) session.getAttribute("subCart");

        // Calculate total amount using SubscriptionService
        BigDecimal totalAmount = subscriptionService.calculateTotalAmount(cart);

        model.addAttribute("cart", cart);
        model.addAttribute("subTotalAmount", totalAmount);

        return "subCart";
    }

    // Remove the subscription item
    @PostMapping("/subremove")
    public String removeFromCart(@RequestParam("index") int index, HttpSession session, Model model) {
        @SuppressWarnings("unchecked")
        List<Subscription> cart = (List<Subscription>) session.getAttribute("subCart");
        if (cart != null && index >= 0 && index < cart.size()) {
            Subscription subscription = cart.remove(index);

            // Restore stock of the removed subscription item
            if (subscription != null) {
                groceryService.updateStock(subscription.getGroceries().getGrocery_id(), subscription.getQuantity());
            }

            session.setAttribute("subCart", cart);
        }
        return "redirect:/subscription/subcart";
    }

    // Increase the quantity of subscription item
    @PostMapping("/addquantity")
    public String addQuantity(@RequestParam("index") int index, HttpSession session, Model model) {
        @SuppressWarnings("unchecked")
        List<Subscription> cart = (List<Subscription>) session.getAttribute("subCart");

        if (cart != null && index >= 0 && index < cart.size()) {
            Subscription subscription = cart.get(index);

            // Check if stock is available before increasing quantity
            if (!groceryService.updateStock(subscription.getGroceries().getGrocery_id(), -1)) {
                model.addAttribute("message", "Insufficient stock to increase quantity.");
                return "redirect:/subscription/subcart";
            }

            subscriptionService.addQuantity(index, cart);
            session.setAttribute("subCart", cart);

            // Calculate the total amount after addition
            BigDecimal totalAmount = subscriptionService.calculateTotalAmount(cart);
            model.addAttribute("subCart", cart);
            model.addAttribute("subTotalAmount", totalAmount);
        }

        return "redirect:/subscription/subcart";
    }

    // Decrease the quantity of subscription item
    @PostMapping("/reducequantity")
    public String reduceQuantity(@RequestParam("index") int index, HttpSession session, Model model) {
        @SuppressWarnings("unchecked")
        List<Subscription> cart = (List<Subscription>) session.getAttribute("subCart");

        if (cart != null && index >= 0 && index < cart.size()) {
            Subscription subscription = cart.get(index);

            subscriptionService.reduceQuantity(index, cart);

            // Restore stock when decreasing quantity
            groceryService.updateStock(subscription.getGroceries().getGrocery_id(), 1);
            session.setAttribute("subCart", cart);

            // Calculate the total amount after reduction
            BigDecimal totalAmount = subscriptionService.calculateTotalAmount(cart);
            model.addAttribute("subCart", cart);
            model.addAttribute("subTotalAmount", totalAmount);
        }

        return "redirect:/subscription/subcart";
    }

    // Redirecting to the payment page
    @GetMapping("/subcheckout")
    public String checkout(HttpSession session, Model model) {
        @SuppressWarnings("unchecked")
        List<Subscription> cart = (List<Subscription>) session.getAttribute("subCart");
        Users user = (Users) session.getAttribute("user");

        String result = subscriptionService.checkoutSubscriptions(cart, user);

        if (result.equals("No items in the cart") || result.contains("Insufficient wallet balance")) {
            model.addAttribute("message", result);
            return "subCart";
        }

        // Clear the subscription cart
        session.removeAttribute("subCart");

        // Redirect to the payment success page
        model.addAttribute("message", result);
        return "subscriptionSuccess";
    }

    // Display the calendar page
    @GetMapping("/subscriptionlist")
    public String viewSubscriptions(Model model, HttpSession session) {
        return "calander";
    }

    // Loading the subscription details into the calendar
    @GetMapping("/api/subscriptions")
    @ResponseBody
    public List<Map<String, Object>> getSubscriptions(HttpSession session) {
        Users user = (Users) session.getAttribute("user");
        List<Subscription> subscriptions = subscriptionService.getSubscriptionsByUserId(user.getUser_id());
        List<Map<String, Object>> events = new ArrayList<>();

        for (Subscription subscription : subscriptions) {
            Map<String, Object> event = new HashMap<>();
            event.put("id", subscription.getSubscription_id()); // Include event ID
            event.put("title", subscription.getGroceries().getGroceryName());
            event.put("start", subscription.getStartedAt().toInstant().toString()); // Convert Timestamp to ISO 8601 string
            event.put("frequency", subscription.getFrequency().toString());
            event.put("amount", subscription.getAmount().toString());
            event.put("quantity", subscription.getQuantity());
            event.put("status", subscription.getSubStatus().toString());
            events.add(event);
        }

        return events;
    }

    // Updating the status of the subscription
    @PostMapping("/update-status")
    @ResponseBody
    public Map<String, Object> updateSubscriptionStatus(
            @RequestParam("eventId") String id,
            @RequestParam("status") String status) {

        Map<String, Object> response = new HashMap<>();

        if (status == null || status.isEmpty()) {
            response.put("success", false);
            response.put("message", "Status is required");
            return response;
        }

        boolean success = subscriptionService.updateSubscriptionStatus(id, status);

        if (success) {
            response.put("success", true);
            response.put("message", "Subscription status updated successfully");
        } else {
            response.put("success", false);
            response.put("message", "Failed to update status");
        }

        return response;
    }

    // Method to display all subscriptions
    @GetMapping("/allsubscriptions")
    public String viewAllSubscriptions(Model model) {
        List<Subscription> subscriptions = subscriptionService.getAllSubscription();
        model.addAttribute("subscriptions", subscriptions);
        return "sub-list";
    }
}
