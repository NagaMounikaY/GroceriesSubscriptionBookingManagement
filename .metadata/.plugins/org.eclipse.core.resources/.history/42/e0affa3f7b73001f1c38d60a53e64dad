package com.crimsonlogic.groceriessubbookingsystem.controller;

import java.util.Optional;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.crimsonlogic.groceriessubbookingsystem.entity.Users;
import com.crimsonlogic.groceriessubbookingsystem.service.UserService;

@Controller
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserService userService;

    // Display the registration page
    @GetMapping("/register")
    public String showSignUpForm(Model model) {
        model.addAttribute("user", new Users());
        return "signup";
    }

    // Load the user details into the database
    @PostMapping("/signup")
    public String registerUser(@ModelAttribute("user") Users user, Model model) {
        userService.registerUser(user);
        model.addAttribute("message", "User registered successfully!");
        return "login";
    }

    // Display the login page
    @GetMapping("/login")
    public String showLoginForm(Model model) {
        model.addAttribute("user", new Users());
        return "login";
    }

    // Redirect to the role-based JSP page while checking the validations
    @PostMapping("/login")
    public String loginUser(@ModelAttribute("user") Users user, Model model, HttpSession session) {
        Optional<Users> loggedInUser = userService.loginUser(user.getUserEmail(), user.getUserPassword());
        if (loggedInUser.isPresent()) {
            Users loggedIn = loggedInUser.get();
            session.setAttribute("userRole", loggedIn.getUserRole());
            session.setAttribute("user", loggedIn);
            if ("seller".equalsIgnoreCase(loggedIn.getUserRole())) {
                return "seller";
            } else if ("customer".equalsIgnoreCase(loggedIn.getUserRole())) {
                return "customer";
            } else {
                model.addAttribute("error", "Unknown user role");
                return "login";
            }
        } else {
            model.addAttribute("error", "Invalid email or password");
            return "login";
        }
    }

    // Display the forgot password form
    @GetMapping("/forgotPassword")
    public String showForgotPasswordForm() {
        return "forgotPassword";
    }

    // Handle the forgot password request
    @PostMapping("/forgotPassword")
    public String handleForgotPassword(@RequestParam("email") String email, Model model) {
        Users user = userService.findByEmail(email);
        if (user != null) {
            model.addAttribute("securityQuestion", user.getSecurityQuestion());
            model.addAttribute("email", email);
            return "verifySecurityQuestion";
        } else {
            model.addAttribute("error", "No user found with this email.");
            return "forgotPassword";
        }
    }

    // Verify the security question answer
    @PostMapping("/verifySecurityQuestion")
    public String verifySecurityQuestion(@RequestParam("email") String email,
                                          @RequestParam("answer") String answer, Model model) {
        Users user = userService.findByEmail(email);
        if (user != null && user.getSecurityAnswer().equals(answer)) {
            model.addAttribute("email", email);
            return "resetPassword";
        } else {
            model.addAttribute("error", "Incorrect answer.");
            return "verifySecurityQuestion";
        }
    }

    // Handle the password reset
    @PostMapping("/resetPassword")
    public String resetPassword(@RequestParam("email") String email,
                                @RequestParam("newPassword") String newPassword, Model model) {
        Users user = userService.findByEmail(email);
        if (user != null) {
            userService.updatePassword(email, newPassword);
            model.addAttribute("message", "Password reset successfully.");
            return "login";
        } else {
            model.addAttribute("error", "User not found.");
            return "resetPassword";
        }
    }

    // Display user profile
    @GetMapping("/profile")
    public String showProfileForm(@RequestParam("user_id") String userId, Model model) {
        Users user = userService.getUserById(userId);
        if (user != null) {
            model.addAttribute("user", user);
            return "profile";
        } else {
            model.addAttribute("error", "User not found.");
            return "error";
        }
    }

    // Update user profile
    @PostMapping("/profile")
    public String updateUser(@ModelAttribute("user") Users user, Model model) {
        Users existingUser = userService.getUserById(user.getUser_id());
        if (existingUser != null) {
            userService.updateUser(user.getUser_id(), user);
            model.addAttribute("message", "Profile updated successfully!");
            model.addAttribute("user", user);
            return "profile";
        } else {
            model.addAttribute("error", "User not found.");
            return "error";
        }
    }
}
