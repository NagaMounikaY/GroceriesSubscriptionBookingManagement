package com.crimsonlogic.groceriessubbookingsystem.service;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.crimsonlogic.groceriessubbookingsystem.entity.Groceries;
import com.crimsonlogic.groceriessubbookingsystem.entity.Subscription;
import com.crimsonlogic.groceriessubbookingsystem.entity.Users;
import com.crimsonlogic.groceriessubbookingsystem.repository.SubscriptionRepository;
import com.crimsonlogic.groceriessubbookingsystem.repository.UserRepository;

@Service
public class SubscriptionServiceImpl implements SubscriptionService {

    @Autowired
    private SubscriptionRepository subscriptionRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private WalletService walletService;

    @Override
    public Subscription createSubscription(String userId, String groceryId, Subscription.Frequency frequency, int durationMonths, BigDecimal amount) {
        Users user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        
        if (walletService.deductAmount(userId, amount.doubleValue())) {
            Subscription subscription = new Subscription();
            subscription.setUser(user);
            subscription.setGroceries(new Groceries(groceryId)); // Assuming Groceries has a constructor that accepts ID
            subscription.setFrequency(frequency);
            subscription.setDurationMonths(durationMonths);
            subscription.setAmount(amount);
            subscription.setStartedAt(Timestamp.from(Instant.now()));
            
            return subscriptionRepository.save(subscription);
        } else {
            throw new RuntimeException("Insufficient wallet balance");
        }
    }

    @Override
    public List<Subscription> getSubscriptionsByUserId(String userId) {
        return subscriptionRepository.findByUserId(userId);
    }
}
