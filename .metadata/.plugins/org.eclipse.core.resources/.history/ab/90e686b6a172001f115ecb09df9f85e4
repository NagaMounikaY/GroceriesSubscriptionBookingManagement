@Service
public class SubscriptionServiceImpl implements SubscriptionService {

    // Existing fields and methods

    @Override
    public Subscription createSubscription(String groceryId, String userId, int quantity, String frequencyStr,
                                           String startDateStr, String weekDay, Integer dayOfMonth) throws IOException {
        // Fetch the grocery and user details
        Groceries grocery = groceriesRepository.findById(groceryId)
                                               .orElseThrow(() -> new IllegalArgumentException("Invalid grocery ID"));
        Users user = userRepository.findById(userId)
                                   .orElseThrow(() -> new IllegalArgumentException("Invalid user ID"));

        // Initialize subscription
        Subscription subscription = new Subscription();
        subscription.setGroceries(grocery);
        subscription.setUser(user);
        subscription.setQuantity(quantity);
        subscription.setSubStatus(Subscription.SubscriptionStatus.Pending);

        // Set frequency and start date based on input
        Subscription.Frequency frequency;
        try {
            frequency = Subscription.Frequency.valueOf(frequencyStr);
        } catch (IllegalArgumentException e) {
            frequency = Subscription.Frequency.daily; // Default value or handle error
        }
        subscription.setFrequency(frequency);

        // Calculate the base amount based on frequency
        BigDecimal baseAmount = calculateBaseAmount(grocery.getGrocery_price(), frequency);
        subscription.setAmount(baseAmount.multiply(BigDecimal.valueOf(quantity)));

        // Handle different start dates and frequencies
        Timestamp startTimestamp = calculateStartTimestamp(frequency, startDateStr, weekDay, dayOfMonth);
        if (startTimestamp != null) {
            subscription.setStartedAt(startTimestamp);
        }

        // Save the subscription
        return subscriptionRepository.save(subscription);
    }

    private BigDecimal calculateBaseAmount(BigDecimal price, Subscription.Frequency frequency) {
        int multiplier = getMultiplier(frequency);
        return price.multiply(BigDecimal.valueOf(multiplier));
    }

    private Timestamp calculateStartTimestamp(Subscription.Frequency frequency, String startDateStr, String weekDay, Integer dayOfMonth) {
        Timestamp startTimestamp = null;
        switch (frequency) {
            case daily:
                if (startDateStr != null && !startDateStr.isEmpty()) {
                    LocalDate startDate = LocalDate.parse(startDateStr, DateTimeFormatter.ISO_LOCAL_DATE);
                    startTimestamp = Timestamp.from(startDate.atStartOfDay().toInstant(java.time.ZoneOffset.UTC));
                }
                break;
            case weekly:
                if (weekDay != null) {
                    Calendar cal = Calendar.getInstance();
                    int currentDayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
                    int targetDayOfWeek = getDayOfWeek(weekDay);
                    int daysUntilTargetDay = (targetDayOfWeek - currentDayOfWeek + 7) % 7;
                    cal.add(Calendar.DAY_OF_YEAR, daysUntilTargetDay);
                    startTimestamp = new Timestamp(cal.getTimeInMillis());
                }
                break;
            case monthly:
                if (dayOfMonth != null) {
                    LocalDate today = LocalDate.now();
                    LocalDate nextMonth = today.plusMonths(1);
                    LocalDate subscriptionDate = nextMonth.withDayOfMonth(dayOfMonth);
                    startTimestamp = Timestamp.from(subscriptionDate.atStartOfDay().toInstant(java.time.ZoneOffset.UTC));
                }
                break;
        }
        return startTimestamp;
    }

    private int getMultiplier(Subscription.Frequency frequency) {
        switch (frequency) {
            case daily:
                return 30; // Assume 30 days in a month
            case weekly:
                return 4; // Approximate number of weeks in a month
            case monthly:
                return 1; // One month
            default:
                throw new IllegalArgumentException("Unknown frequency: " + frequency);
        }
    }

    @Override
    public void updateSubscriptionAmount(Subscription subscription) {
        BigDecimal baseAmount = calculateBaseAmount(subscription.getGroceries().getGrocery_price(), subscription.getFrequency());
        subscription.setAmount(baseAmount.multiply(BigDecimal.valueOf(subscription.getQuantity())));
        subscriptionRepository.save(subscription);
    }

    @Override
    public BigDecimal calculateTotalAmount(List<Subscription> cart) {
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (Subscription sub : cart) {
            totalAmount = totalAmount.add(sub.getAmount());
        }
        return totalAmount;
    }

    @Override
    public void addQuantity(int index, List<Subscription> cart) {
        if (cart != null && index >= 0 && index < cart.size()) {
            Subscription subscription = cart.get(index);
            subscription.setQuantity(subscription.getQuantity() + 1);
            updateSubscriptionAmount(subscription); // Update amount based on new quantity
        }
    }

    @Override
    public void reduceQuantity(int index, List<Subscription> cart) {
        if (cart != null && index >= 0 && index < cart.size()) {
            Subscription subscription = cart.get(index);
            if (subscription.getQuantity() > 1) {
                subscription.setQuantity(subscription.getQuantity() - 1);
                updateSubscriptionAmount(subscription); // Update amount based on new quantity
            } else {
                cart.remove(index);
            }
        }
    }
}
