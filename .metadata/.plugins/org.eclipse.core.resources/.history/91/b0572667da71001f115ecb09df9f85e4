package com.crimsonlogic.groceriessubbookingsystem.controller;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.crimsonlogic.groceriessubbookingsystem.entity.Order;
import com.crimsonlogic.groceriessubbookingsystem.entity.Payments;
import com.crimsonlogic.groceriessubbookingsystem.entity.Users;
import com.crimsonlogic.groceriessubbookingsystem.service.OrderService;
import com.crimsonlogic.groceriessubbookingsystem.service.PaymentService;
import com.crimsonlogic.groceriessubbookingsystem.service.UserService;

@Controller
@RequestMapping("/payment")
public class PaymentController {

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private OrderService orderService;

    @Autowired
    private UserService userService;
    
    @GetMapping
    public String paymentPage(@RequestParam("totalAmount") BigDecimal totalAmount, Model model) {
        model.addAttribute("totalAmount", totalAmount);
        return "payment";
    }


    @PostMapping("/complete")
    public String completePayment(@ModelAttribute Payments payment, HttpSession session, Model model) {
        Users user = (Users) session.getAttribute("user");
        if (user == null) {
            model.addAttribute("message", "User not found in session");
            return "payment";
        }

        List<Order> cart = (List<Order>) session.getAttribute("cart");
        if (cart == null || cart.isEmpty()) {
            model.addAttribute("message", "No items in the cart");
            return "payment";
        }

        // Save the payment details
        payment.setPayment_date(LocalDate.now());
        payment.setUser(user);
        paymentService.savePayment(payment);

        // Save the orders to the database
        for (Order order : cart) {
            order.setUsers(user);
            orderService.saveOrder(order);
        }

        // Clear the cart from the session
        session.removeAttribute("cart");

        model.addAttribute("message", "Payment completed successfully");
        return "paymentConfirmation";
    }

}
